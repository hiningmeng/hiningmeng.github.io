<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>徐柠檬的博客</title>
    <link>http://www.hiningmeng.cn/</link>
    <description>Recent content on 徐柠檬的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Dec 2019 16:33:58 +0800</lastBuildDate>
    
        <atom:link href="http://www.hiningmeng.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K8s Jenkins Cicd 1</title>
      <link>http://www.hiningmeng.cn/post/k8s-jenkins-cicd-1/</link>
      <pubDate>Fri, 06 Dec 2019 16:33:58 +0800</pubDate>
      
      <guid>http://www.hiningmeng.cn/post/k8s-jenkins-cicd-1/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-082206.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;jenkins&#34;&gt;Jenkins安装&lt;/h4&gt;
&lt;p&gt;参考前一篇文章我们安装好Jenkins的master节点: &lt;a href=&#34;https://mp.weixin.qq.com/s/2pwJhlkjly8VUEFFMWndYQ&#34;&gt;K8S结合Jenkins实现持续集成（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装是的插件我们可以选择推荐安装即可，后面单独安装需要的插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-032036.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;jenkins1&#34;&gt;Jenkins配置&lt;/h4&gt;
&lt;p&gt;系统管理 &amp;ndash;&amp;gt; 插件管理  &amp;ndash;&amp;gt; available，安装需要的插件，有的插件下载不下来可以去官网下载之后上传安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;pipeline&lt;/li&gt;
&lt;li&gt;Git Parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;kubernetes&#34;&gt;配置Kubernetes云信息&lt;/h5&gt;
&lt;p&gt;在系统管理 &amp;ndash;&amp;gt; 系统设置 ，最后面有个Cloud设置，Add a new cloud
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-062108.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加具体的Kubernetes信息，K8S服务器可以是Jenkins本身所在的服务器，也可以是其他集群(需要配置证书)，这里以本身所在集群为例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名称 ：用于pipeline调用云名称&lt;/li&gt;
&lt;li&gt;Kubernetes地址：可以通过kubectl cluster-info命令获取&lt;/li&gt;
&lt;li&gt;Kubernetes 服务证书 key：本身所在的集群因为我们通过sa所以不需要&lt;/li&gt;
&lt;li&gt;Kubernetes 命名空间：Jenkins的nodePod节点启动的namespace&lt;/li&gt;
&lt;li&gt;Jenkins 地址：主节点8080端口通过nodeport暴露出来的，地址:端口&lt;/li&gt;
&lt;li&gt;Jenkins 通道：主节点50000端口通过nodeport暴露出来的，地址:端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-063328.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;pipeline&#34;&gt;创建pipeline任务&lt;/h5&gt;
&lt;p&gt;选择新建任务，构建流水线。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-070739.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装了Git Parameter插件之后，可以进行分支的选择，需要进行参数化构建，这个可以在页面设置，也可以放到pipeline里面，这边直接在页面配置参数。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-073433.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中Use repository如果不设置，后面的Pipeline from SCRM的时候，就会取不到分支；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;指定pipeline地址，可以直接在页面写，做好是通过Git的方式管理。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-073905.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git管理Pipeline的Jenkinsfile文件，需要提供证书拉取
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-074525.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;jenkinsfile&#34;&gt;编写Jenkinsfile文件&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;#定义参数label，K8S启动的pod名称通过这个来制定
def label = &amp;quot;JenkinsPOD-${UUID.randomUUID().toString()}&amp;quot; 
#定义jenkins的工作目录
def jenworkspace=&amp;quot;/home/jenkins/workspace/${params.PROJECT}&amp;quot;
#maven项目缓存，提供编译速度
def mvnrepo=&amp;quot;/tmp/repository&amp;quot;
#kubectl和docker执行文件，这个可以打到镜像里面，这边直接共享的方式提供
def sharefile=&amp;quot;/tmp/sharefile&amp;quot;
#deployment等K8S的yaml文件目录
def k8srepo=&#39;/tmp/k8s_repos&#39;

#cloud为我们前面提供的云名称，nodeSelector是K8S运行pod的节点选择
podTemplate(label: label, cloud: &#39;kubernetes-hiningmeng&#39;,nodeSelector: &#39;devops.k8s.icjl/jenkins=jnlp&#39;,
    containers: [
        containerTemplate(
            name: &#39;jnlp&#39;,
            image: &#39;registry-vpc.cn-hangzhou.aliyuncs.com/hiningmeng/jnlp:v1&#39;,
            ttyEnabled: true,
            alwaysPullImage: false),
        containerTemplate(
            name: &#39;jnlp-maven&#39;,
            image: &#39;jenkins/jnlp-agent-maven&#39;,
            //image:&#39;ungerts/jnlp-agent-maven&#39;,
            ttyEnabled: true,
            alwaysPullImage: false,
            command: &#39;cat&#39;)
    ],
    volumes: [
        hostPathVolume(hostPath: &#39;/var/run/docker.sock&#39;, mountPath:&#39;/var/run/docker.sock&#39;),
        persistentVolumeClaim(mountPath: &amp;quot;$mvnrepo&amp;quot;, claimName: &#39;maven-repo-pvc&#39;, readOnly: false),
        persistentVolumeClaim(mountPath: &amp;quot;$sharefile&amp;quot;, claimName: &#39;sharefile-repo-pvc&#39;, readOnly: false),
    ]
)
{
    
    node (label) {
        stage(&#39;Hello World&#39;){
            container(&#39;jnlp&#39;){
                echo &amp;quot;hello, world&amp;quot;
                sh &amp;quot;ln -s $sharefile/kubectl  /usr/bin/kubectl&amp;quot;
                sh &amp;quot;ln -s $sharefile/docker /usr/bin/docker&amp;quot;

            }
        }
        stage(&#39;Git Pull&#39;){
            dir(&amp;quot;$jenworkspace&amp;quot;){
                git branch: &amp;quot;${params.BRANCH}&amp;quot;, changelog: false, credentialsId: &#39;jenkins-pull-key&#39;, poll: false, url: &amp;quot;${params.CODE_URL}&amp;quot;
            }
        }
        stage(&#39;Mvn Package&#39;){
            container(&#39;jnlp-maven&#39;){
                dir(&amp;quot;$jenworkspace&amp;quot;){    
                    sh &amp;quot;mvn clean install -Dmaven.test.skip=true  -U  -s  $sharefile/settings.xml&amp;quot;
                }
            }                
        }
        stage(&#39;Docker build&#39;){
            ...
        }
        stage(&#39;K8S Deploy&#39;){
            ...
        }
    }
}


&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;具体的脚本还是自己摸索一下，不同的项目定制即可，大体的架子如上面的实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;heading&#34;&gt;构建项目&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-074443.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务一次都没构建的时候会出现报错，构建一次就没问题了；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-080954.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果一切正常的话,在K8S的devops命名空间会创建出新的POD
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-081238.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，简单的可伸缩的基于K8S的Jenkins就完成了，如有问题欢迎交流。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>k8s下使用Jenkins实现CICD(二)</title>
      <link>http://www.hiningmeng.cn/post/k8s-jenkins-cicd-2/</link>
      <pubDate>Fri, 06 Dec 2019 16:32:24 +0800</pubDate>
      
      <guid>http://www.hiningmeng.cn/post/k8s-jenkins-cicd-2/</guid>
      
        <description>&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-082206.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;jenkins&#34;&gt;Jenkins安装&lt;/h4&gt;
&lt;p&gt;参考前一篇文章我们安装好Jenkins的master节点: &lt;a href=&#34;https://mp.weixin.qq.com/s/2pwJhlkjly8VUEFFMWndYQ&#34;&gt;K8S结合Jenkins实现持续集成（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装是的插件我们可以选择推荐安装即可，后面单独安装需要的插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-032036.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;jenkins1&#34;&gt;Jenkins配置&lt;/h4&gt;
&lt;p&gt;系统管理 &amp;ndash;&amp;gt; 插件管理  &amp;ndash;&amp;gt; available，安装需要的插件，有的插件下载不下来可以去官网下载之后上传安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;pipeline&lt;/li&gt;
&lt;li&gt;Git Parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;kubernetes&#34;&gt;配置Kubernetes云信息&lt;/h5&gt;
&lt;p&gt;在系统管理 &amp;ndash;&amp;gt; 系统设置 ，最后面有个Cloud设置，Add a new cloud
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-062108.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;添加具体的Kubernetes信息，K8S服务器可以是Jenkins本身所在的服务器，也可以是其他集群(需要配置证书)，这里以本身所在集群为例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名称 ：用于pipeline调用云名称&lt;/li&gt;
&lt;li&gt;Kubernetes地址：可以通过kubectl cluster-info命令获取&lt;/li&gt;
&lt;li&gt;Kubernetes 服务证书 key：本身所在的集群因为我们通过sa所以不需要&lt;/li&gt;
&lt;li&gt;Kubernetes 命名空间：Jenkins的nodePod节点启动的namespace&lt;/li&gt;
&lt;li&gt;Jenkins 地址：主节点8080端口通过nodeport暴露出来的，地址:端口&lt;/li&gt;
&lt;li&gt;Jenkins 通道：主节点50000端口通过nodeport暴露出来的，地址:端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-063328.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;pipeline&#34;&gt;创建pipeline任务&lt;/h5&gt;
&lt;p&gt;选择新建任务，构建流水线。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-070739.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;安装了Git Parameter插件之后，可以进行分支的选择，需要进行参数化构建，这个可以在页面设置，也可以放到pipeline里面，这边直接在页面配置参数。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-073433.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中Use repository如果不设置，后面的Pipeline from SCRM的时候，就会取不到分支；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;指定pipeline地址，可以直接在页面写，做好是通过Git的方式管理。
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-073905.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git管理Pipeline的Jenkinsfile文件，需要提供证书拉取
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-074525.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;jenkinsfile&#34;&gt;编写Jenkinsfile文件&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;#定义参数label，K8S启动的pod名称通过这个来制定
def label = &amp;quot;JenkinsPOD-${UUID.randomUUID().toString()}&amp;quot;
#定义jenkins的工作目录
def jenworkspace=&amp;quot;/home/jenkins/workspace/${params.PROJECT}&amp;quot;
#maven项目缓存，提供编译速度
def mvnrepo=&amp;quot;/tmp/repository&amp;quot;
#kubectl和docker执行文件，这个可以打到镜像里面，这边直接共享的方式提供
def sharefile=&amp;quot;/tmp/sharefile&amp;quot;
#deployment等K8S的yaml文件目录
def k8srepo=&#39;/tmp/k8s_repos&#39;

#cloud为我们前面提供的云名称，nodeSelector是K8S运行pod的节点选择
podTemplate(label: label, cloud: &#39;kubernetes-hiningmeng&#39;,nodeSelector: &#39;devops.k8s.icjl/jenkins=jnlp&#39;,
    containers: [
        containerTemplate(
            name: &#39;jnlp&#39;,
            image: &#39;registry-vpc.cn-hangzhou.aliyuncs.com/hiningmeng/jnlp:v1&#39;,
            ttyEnabled: true,
            alwaysPullImage: false),
        containerTemplate(
            name: &#39;jnlp-maven&#39;,
            image: &#39;jenkins/jnlp-agent-maven&#39;,
            //image:&#39;ungerts/jnlp-agent-maven&#39;,
            ttyEnabled: true,
            alwaysPullImage: false,
            command: &#39;cat&#39;)
    ],
    volumes: [
        hostPathVolume(hostPath: &#39;/var/run/docker.sock&#39;, mountPath:&#39;/var/run/docker.sock&#39;),
        persistentVolumeClaim(mountPath: &amp;quot;$mvnrepo&amp;quot;, claimName: &#39;maven-repo-pvc&#39;, readOnly: false),
        persistentVolumeClaim(mountPath: &amp;quot;$sharefile&amp;quot;, claimName: &#39;sharefile-repo-pvc&#39;, readOnly: false),
    ]
)
{

    node (label) {
        stage(&#39;Hello World&#39;){
            container(&#39;jnlp&#39;){
                echo &amp;quot;hello, world&amp;quot;
                sh &amp;quot;ln -s $sharefile/kubectl  /usr/bin/kubectl&amp;quot;
                sh &amp;quot;ln -s $sharefile/docker /usr/bin/docker&amp;quot;

            }
        }
        stage(&#39;Git Pull&#39;){
            dir(&amp;quot;$jenworkspace&amp;quot;){
                git branch: &amp;quot;${params.BRANCH}&amp;quot;, changelog: false, credentialsId: &#39;jenkins-pull-key&#39;, poll: false, url: &amp;quot;${params.CODE_URL}&amp;quot;
            }
        }
        stage(&#39;Mvn Package&#39;){
            container(&#39;jnlp-maven&#39;){
                dir(&amp;quot;$jenworkspace&amp;quot;){
                    sh &amp;quot;mvn clean install -Dmaven.test.skip=true  -U  -s  $sharefile/settings.xml&amp;quot;
                }
            }
        }
        stage(&#39;Docker build&#39;){
            ...
        }
        stage(&#39;K8S Deploy&#39;){
            ...
        }
    }
}


&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;具体的脚本还是自己摸索一下，不同的项目定制即可，大体的架子如上面的实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;heading&#34;&gt;构建项目&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-074443.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务一次都没构建的时候会出现报错，构建一次就没问题了；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-080954.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果一切正常的话,在K8S的devops命名空间会创建出新的POD
&lt;img src=&#34;http://img.hixuxu.com/2019-10-21-081238.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此，简单的可伸缩的基于K8S的Jenkins就完成了，如有问题欢迎交流。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Centos7下通过kubeadm安装kubernetes-v1.14.2</title>
      <link>http://www.hiningmeng.cn/post/k8s-install-centos/</link>
      <pubDate>Fri, 06 Dec 2019 15:43:19 +0800</pubDate>
      
      <guid>http://www.hiningmeng.cn/post/k8s-install-centos/</guid>
      
        <description>&lt;p&gt;本文使用的K8S版本已经不是最新，仅供参考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.hixuxu.com/2019-12-06-080028.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;hosts&#34;&gt;添加hosts文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;10.40.0.201 hiningmeng-k8s1
      10.40.0.202 hiningmeng-k8s2
      10.40.0.203 hiningmeng-k8s3
      10.40.0.204 hiningmeng-k8s4
&amp;quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;selinux&#34;&gt;关闭防火墙、selinux&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/selinux/config
setenforce 0
systemctl disable firewalld.service
systemctl stop firewalld.service
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;netbridge&#34;&gt;配置net.bridge&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;modprobe br_netfilter
echo &amp;quot;net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ipvs&#34;&gt;开启IPVS&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; /etc/sysconfig/modules/ipvs.modules &amp;lt;&amp;lt;EOF
# !/bin/bash

modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
modprobe -- br_netfilter
EOF
chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; bash /etc/sysconfig/modules/ipvs.modules &amp;amp;&amp;amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4

yum install -y  ipvsadm ipset
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;docker&#34;&gt;安装Docker&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

yum install -y --setopt=obsoletes=0 docker-ce-18.09.2
mkdir /etc/docker

cat &amp;lt;&amp;lt; &#39;EOF&#39; &amp;gt; /etc/docker/daemon.json
{
    &amp;quot;data-root&amp;quot;: &amp;quot;/data/docker/docker&amp;quot;,
    &amp;quot;iptables&amp;quot;: false,
    &amp;quot;log-driver&amp;quot;: &amp;quot;json-file&amp;quot;,
    &amp;quot;storage-driver&amp;quot;: &amp;quot;overlay2&amp;quot;,
    &amp;quot;storage-opts&amp;quot;: [ &amp;quot;overlay2.override_kernel_check=true&amp;quot;],
    &amp;quot;log-opts&amp;quot;: {
        &amp;quot;max-size&amp;quot;: &amp;quot;100m&amp;quot;
    },
    &amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;]
}
EOF

systemctl start docker
systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;swap&#34;&gt;关闭swap&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;swapoff -a
# vim /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kubeadmkubectl&#34;&gt;安装kubeadm、kubectl&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF

# yum list --showduplicates | grep &#39;kubeadm\|kubectl\|kubelet&#39;

yum install -y kubelet-1.14.2 kubeadm-1.14.2 kubectl-1.14.2 --disableexcludes=kubernetes

systemctl enable kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;heading&#34;&gt;提前准备需要的镜像&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# cat docker-pull.sh
# !/bin/bash

images=(k8s.gcr.io/kube-apiserver:v1.14.2
        k8s.gcr.io/kube-controller-manager:v1.14.2
        k8s.gcr.io/kube-scheduler:v1.14.2
        k8s.gcr.io/kube-proxy:v1.14.2
        k8s.gcr.io/pause:3.1
        k8s.gcr.io/etcd:3.3.10
        k8s.gcr.io/coredns:1.3.1
        k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1)
for var in ${images[@]};do
        image=${var/k8s.gcr.io\//registry.cn-hangzhou.aliyuncs.com\/hiningmeng\/}
        docker pull ${image}
        docker tag ${image} ${var}
done

docker pull registry.cn-hangzhou.aliyuncs.com/hiningmeng/flannel:v0.11.0-amd64
docker tag registry.cn-hangzhou.aliyuncs.com/hiningmeng/flannel:v0.11.0-amd64 quay.io/coreos/flannel:v0.11.0-amd64
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kubeadm-init-master&#34;&gt;kubeadm init 安装master&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kubeadm init \
  --kubernetes-version=v1.14.2 \
  --pod-network-cidr=192.168.0.0/16 \
  --service-cidr=172.96.0.0/12 \
  --apiserver-advertise-address=10.40.0.201

mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubeadm join 10.40.0.201:6443 --token mjgmyw.kafm9jr4zczzk7z8 --discovery-token-ca-cert-hash sha256:4356ec91b61cf162cc29b76e0c118fbc7bad3a4d25bbfa4ea53ae0a9ed046f4a

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;flannel&#34;&gt;安装flannel&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

......
containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.11.0-amd64
        command:
        - /opt/bin/flanneld
        args:
        - --ip-masq
        - --kube-subnet-mgr
        - --iface=eth1
......

kubectl apply -f kube-flannel.yml

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;profile&#34;&gt;配置profile&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;source &amp;lt;(kubectl completion bash) #这个是命令补全
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;/etc/profile
source &amp;lt;(kubectl completion bash)
alias k=&#39;kubectl&#39;
alias ka=&#39;kubectl apply --recursive -f&#39;
alias kex=&#39;kubectl exec -i -t&#39;
alias klo=&#39;kubectl logs -f&#39;
alias kg=&#39;kubectl get&#39;
alias kd=&#39;kubectl describe&#39;
EOF

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dns&#34;&gt;测试DNS&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kubectl run curl --image=radial/busyboxplus:curl -it
nslookup kubernetes.default

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ipvs1&#34;&gt;开启IPVS&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 修改ConfigMap的kube-system/kube-proxy中的config.conf，mode: &amp;quot;ipvs&amp;quot;：
kubectl edit cm kube-proxy -n kube-system

# 之后重启各个节点上的kube-proxy pod：
kubectl get pod -n kube-system | grep kube-proxy | awk &#39;{system(&amp;quot;kubectl delete pod &amp;quot;$1&amp;quot; -n kube-system&amp;quot;)}&#39;

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm&#34;&gt;安装helm&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
tar -zxvf helm-v2.13.1-linux-amd64.tar.gz
cp linux-amd64/helm /usr/bin/

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tillerserviceaccount&#34;&gt;准备tiller需要的ServiceAccount&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# helm-rbac-config.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system

kubectl create  -f helm-rbac-config.yaml

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm-init&#34;&gt;helm init&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;helm init --upgrade --service-account tiller --skip-refresh --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.13.1 --stable-repo-url http://mirror.azure.cn/kubernetes/charts/


&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm-repo-&#34;&gt;helm repo 可以改成阿里的，但是好久没更新了，上面使用的是微软的&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;helm repo remove stable
helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
helm repo update
#helm search

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm-ingress&#34;&gt;helm 安装ingress&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# cat ingress-nginx.yaml
controller:
  image:
    repository: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller
    tag: 0.24.1
    pullPolicy: IfNotPresent
  replicaCount: 1
  hostNetwork: true
  nodeSelector:
    node-role.kubernetes.io/edge: &#39;&#39;
  affinity:
    podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - nginx-ingress
            - key: component
              operator: In
              values:
              - controller
          topologyKey: kubernetes.io/hostname
  tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule

defaultBackend:
  image:
    repository: registry.cn-hangzhou.aliyuncs.com/google_containers/defaultbackend
    tag: 1.4
    pullPolicy: IfNotPresent
  nodeSelector:
    node-role.kubernetes.io/edge: &#39;&#39;
  tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule

helm install stable/nginx-ingress -n nginx-ingress --namespace ingress-nginx  -f ingress-nginx.yaml

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm1&#34;&gt;helm升级应用命令如下&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;helm upgrade -f ingress-nginx.yaml  nginx-ingress stable/nginx-ingress

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm2&#34;&gt;helm卸载命令&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;helm del --purge nginx-ingress

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-kubernetesdashboard&#34;&gt;安装 kubernetes-dashboard&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# cat kubernetes-dashboard.yaml
image:
  repository: registry.cn-hangzhou.aliyuncs.com/hiningmeng/kubernetes-dashboard-amd64
  tag: v1.10.1
ingress:
  enabled: true
  hosts:
    - k8s.icjl.test
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: &amp;quot;true&amp;quot;
    nginx.ingress.kubernetes.io/backend-protocol: &amp;quot;HTTPS&amp;quot;
  tls:
    - secretName: icjl-test-secret
      hosts:
      - k8s.icjl.test
rbac:
  clusterAdminRole: true

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;dashboard&#34;&gt;安装dashboard&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;helm install stable/kubernetes-dashboard \
-n kubernetes-dashboard \
--namespace kubernetes-dashboard  \
-f kubernetes-dashboard.yaml

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;token&#34;&gt;登录token&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kubectl -n kubernetes-dashboard  get secret | grep kubernetes-dashboard-token

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;metricsserver&#34;&gt;安装metrics-server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# cat metrics-server.yaml
args:
- --logtostderr
- --kubelet-insecure-tls
- --kubelet-preferred-address-types=InternalIP

helm install stable/metrics-server \
-n metrics-server \
--namespace monitoring \
-f metrics-server.yaml

&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
